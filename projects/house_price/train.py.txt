# projects/house_price/train.py
import os
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import joblib

def rmse(y_true, y_pred):
    return np.sqrt(mean_squared_error(y_true, y_pred))

def main():
    data = pd.read_csv("projects/house_price/data/train.csv")
    data['SalePrice_log'] = np.log1p(data['SalePrice'])

    features = ['OverallQual','GrLivArea','YearBuilt','TotalBsmtSF','FullBath','GarageCars','GarageArea','LotArea']
    target = 'SalePrice_log'
    df = data[features + [target]].copy()

    X = df[features]
    y = df[target]

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    numeric_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='median')),
        ('scaler', StandardScaler())
    ])

    preprocessor = ColumnTransformer(transformers=[
        ('num', numeric_transformer, features)
    ])

    pipeline = Pipeline(steps=[
        ('preprocessor', preprocessor),
        ('regressor', RandomForestRegressor(n_estimators=100, random_state=42, n_jobs=-1))
    ])

    pipeline.fit(X_train, y_train)
    preds = pipeline.predict(X_test)

    print("MAE:", mean_absolute_error(y_test, preds))
    print("RMSE:", rmse(y_test, preds))
    print("R2:", r2_score(y_test, preds))

    os.makedirs("projects/house_price/models", exist_ok=True)
    joblib.dump(pipeline, "projects/house_price/models/house_price_model.joblib")
    print("Saved model to projects/house_price/models/house_price_model.joblib")

if __name__ == "__main__":
    main()
