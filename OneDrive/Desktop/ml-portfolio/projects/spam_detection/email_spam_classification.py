# -*- coding: utf-8 -*-
"""Email_spam_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FtMEf4MAmHfx5umDCSfjJ9-Uo43RXeXC
"""

#Import libraries and load the data
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

file_path = ('/content/spam_dataset.csv')
df = pd.read_csv(file_path)

df

df.head()

#Data cleaning and preprocessing
# Replace missing values with empty strings

data = df.where(pd.notnull(df), '')

# Show info and shape of data
data.info()
data.shape

#Label encoding target variable
data.loc[data['is_spam'] == 1, 'is_spam'] = 1
data.loc[data['is_spam'] == 0, 'is_spam'] = 0

# Define features and labels
X = data['message_content']
Y = data['is_spam'].astype('int')

print(X.head())
print(Y.head())

'''Split data into train and test sets'''
X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size = 0.2, random_state=3)

X.shape,X_train.shape,X_test.shape

Y.shape, Y_train.shape, Y_test.shape

'''Feature extraction using TF-IDF'''
feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)

X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

print(X_train_features)
print(X_test_features)

'''Model training with Logistic Regression'''

model = LogisticRegression()
model.fit(X_train_features, Y_train)

'''Evaluate model on train and test data'''

prediction_on_training_data = model.predict(X_train_features)
accuracy_on_training_data = accuracy_score(Y_train, prediction_on_training_data)
print("Accuracy on training data:", accuracy_on_training_data)

prediction_on_test_data = model.predict(X_test_features)
accuracy_on_test_data = accuracy_score(Y_test, prediction_on_test_data)
print("Accuracy on test data:", accuracy_on_test_data)

'''Test model on your own email text'''

input_email = ["Hello Lonnie, Just wanted to touch base regarding our projectâ€™s next steps. Please find the details below. Information material statement power suddenly summer usually. Serious responsibility before new success each. Kind regards, Terry Griffin Please find attached the updated project plan. Let me know if you have any questions. If you have any questions, please feel free to reach out."]


input_data_features = feature_extraction.transform(input_email)
prediction = model.predict(input_data_features)

if prediction[0] == 0:
    print("Ham mail")
else:
    print("Spam mail")